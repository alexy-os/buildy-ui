{
  "category": "navbar",
  "components": [
    {
      "name": "NavbarMegaMenu",
      "path": "src\\blocks\\navbar\\NavbarMegaMenu.tsx",
      "dependencies": {
        "imports": [],
        "packages": [
          "react",
          "lucide-react",
          "@/components/ui/button",
          "@/components/ui/sheet",
          "@/components/ui/accordion",
          "@/components/ui/navigation-menu",
          "@/utils/viewScript"
        ]
      },
      "content": {
        "brand": {
          "name": "Buildy/UI",
          "icon": {
            "type": "Component",
            "name": "Layers",
            "props": {
              "className": "h-5 w-5"
            }
          }
        },
        "navigation": {
          "main": [
            {
              "id": "getting-started",
              "label": "Getting Started",
              "subItems": [
                {
                  "id": "intro",
                  "title": "Introduction",
                  "description": "Re-usable components built using Radix UI and Tailwind CSS",
                  "href": "#"
                },
                {
                  "id": "install",
                  "title": "Installation",
                  "description": "How to install dependencies and structure your app",
                  "href": "#"
                }
              ]
            },
            {
              "id": "components",
              "label": "Components",
              "subItems": [
                {
                  "id": "alert-dialog",
                  "title": "Alert Dialog",
                  "description": "A modal dialog that interrupts the user with important content",
                  "href": "#"
                },
                {
                  "id": "hover-card",
                  "title": "Hover Card",
                  "description": "Preview content available behind a link",
                  "href": "#"
                }
              ]
            }
          ],
          "static": [
            {
              "id": "docs",
              "path": "#",
              "label": "Documentation",
              "icon": {
                "type": "Component",
                "name": "BookOpen",
                "props": {
                  "className": "h-5 w-5"
                }
              }
            }
          ]
        },
        "actions": [
          {
            "id": "github",
            "path": "#",
            "label": "GitHub",
            "icon": {
              "type": "Component",
              "name": "Github",
              "props": {
                "className": "h-5 w-5"
              }
            }
          }
        ]
      },
      "sourceCode": "import * as React from \"react\";\r\nimport { Menu, BookOpen, Layers, Github } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetTrigger,\r\n  SheetTitle,\r\n  SheetDescription,\r\n} from \"@/components/ui/sheet\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport {\r\n  NavigationMenu,\r\n  NavigationMenuContent,\r\n  NavigationMenuItem,\r\n  NavigationMenuLink,\r\n  NavigationMenuList,\r\n  NavigationMenuTrigger,\r\n  navigationMenuTriggerStyle,\r\n} from \"@/components/ui/navigation-menu\";\r\nimport { registerViewScript } from '@/utils/viewScript';\r\n\r\ntype Content = {\r\n  brand: {\r\n    name: string;\r\n    icon: React.ReactNode;\r\n  };\r\n  navigation: {\r\n    main: {\r\n      id: string;\r\n      label: string;\r\n      subItems: {\r\n        id: string;\r\n        title: string;\r\n        description: string;\r\n        href: string;\r\n      }[];\r\n    }[];\r\n    static: {\r\n      id: string;\r\n      path: string;\r\n      label: string;\r\n      icon: React.ReactNode;\r\n    }[];\r\n  };\r\n  actions: {\r\n    id: string;\r\n    path: string;\r\n    label: string;\r\n    icon: React.ReactNode;\r\n  }[];\r\n};\r\n\r\nconst content: Content = {\r\n  brand: {\r\n    name: \"Buildy/UI\",\r\n    icon: <Layers className=\"h-5 w-5\" />,\r\n  },\r\n  navigation: {\r\n    main: [\r\n      {\r\n        id: \"getting-started\",\r\n        label: \"Getting Started\",\r\n        subItems: [\r\n          {\r\n            id: \"intro\",\r\n            title: \"Introduction\",\r\n            description:\r\n              \"Re-usable components built using Radix UI and Tailwind CSS\",\r\n            href: \"#\",\r\n          },\r\n          {\r\n            id: \"install\",\r\n            title: \"Installation\",\r\n            description:\r\n              \"How to install dependencies and structure your app\",\r\n            href: \"#\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: \"components\",\r\n        label: \"Components\",\r\n        subItems: [\r\n          {\r\n            id: \"alert-dialog\",\r\n            title: \"Alert Dialog\",\r\n            description:\r\n              \"A modal dialog that interrupts the user with important content\",\r\n            href: \"#\",\r\n          },\r\n          {\r\n            id: \"hover-card\",\r\n            title: \"Hover Card\",\r\n            description: \"Preview content available behind a link\",\r\n            href: \"#\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    static: [\r\n      {\r\n        id: \"docs\",\r\n        path: \"#\",\r\n        label: \"Documentation\",\r\n        icon: <BookOpen className=\"h-5 w-5\" />,\r\n      },\r\n    ],\r\n  },\r\n  actions: [\r\n    {\r\n      id: \"github\",\r\n      path: \"#\",\r\n      label: \"GitHub\",\r\n      icon: <Github className=\"h-5 w-5\" />,\r\n    },\r\n  ],\r\n} as const;\r\n\r\ntype ListItemProps = React.ComponentPropsWithoutRef<\"a\"> & {\r\n  title: string;\r\n  href?: string;\r\n};\r\n\r\nconst ListItem = React.forwardRef<React.ElementRef<\"a\">, ListItemProps>(\r\n  ({ title, children, href, ...props }, ref) => (\r\n    <li>\r\n      <NavigationMenuLink asChild>\r\n        <a\r\n          href={href || \"\"}\r\n          ref={ref}\r\n          className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\r\n          {...props}\r\n        >\r\n          <div className=\"text-sm font-medium leading-none\">{title}</div>\r\n          <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground\">\r\n            {children}\r\n          </p>\r\n        </a>\r\n      </NavigationMenuLink>\r\n    </li>\r\n  )\r\n);\r\nListItem.displayName = \"ListItem\";\r\n\r\nconst Brand = () => {\r\n  const { name } = content.brand;\r\n  return (\r\n    <div className=\"flex items-center gap-2\">\r\n      <Layers className=\"h-5 w-5\" />\r\n      <span className=\"font-semibold\">{name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MobileNavigation = () => {\r\n  return (\r\n    <Sheet>\r\n      <SheetTrigger asChild>\r\n        <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\r\n          <Menu className=\"h-5 w-5\" />\r\n          <span className=\"sr-only\">Open menu</span>\r\n        </Button>\r\n      </SheetTrigger>\r\n      <SheetContent side=\"left\" className=\"w-[300px] overflow-y-auto\">\r\n        <div className=\"mb-6\">\r\n          <Brand />\r\n        </div>\r\n        <SheetTitle className=\"sr-only\">Navigation Menu</SheetTitle>\r\n        <SheetDescription className=\"sr-only\">\r\n          Main navigation for mobile devices\r\n        </SheetDescription>\r\n        <nav className=\"flex flex-col\">\r\n          <Accordion type=\"single\" collapsible className=\"w-full\">\r\n            {content.navigation.main.map((section) => (\r\n              <AccordionItem key={section.id} value={section.id}>\r\n                <AccordionTrigger className=\"text-sm\">\r\n                  {section.label}\r\n                </AccordionTrigger>\r\n                <AccordionContent>\r\n                  <div className=\"flex flex-col space-y-2\">\r\n                    {section.subItems.map((item) => (\r\n                      <Button\r\n                        key={item.id}\r\n                        variant=\"ghost\"\r\n                        className=\"justify-start w-full text-sm\"\r\n                        asChild\r\n                      >\r\n                        <a href={item.href}>{item.title}</a>\r\n                      </Button>\r\n                    ))}\r\n                  </div>\r\n                </AccordionContent>\r\n              </AccordionItem>\r\n            ))}\r\n          </Accordion>\r\n          <div className=\"mt-4 flex flex-col space-y-2\">\r\n            {content.navigation.static.map((item) => (\r\n              <Button\r\n                key={item.id}\r\n                variant=\"ghost\"\r\n                className=\"justify-start w-full\"\r\n                asChild\r\n              >\r\n                <a href={item.path}>\r\n                  {item.icon}\r\n                  {item.label}\r\n                </a>\r\n              </Button>\r\n            ))}\r\n            {content.actions.map((action) => (\r\n              <Button\r\n                key={action.id}\r\n                variant=\"outline\"\r\n                className=\"justify-start w-full\"\r\n                asChild\r\n              >\r\n                <a href={action.path}>\r\n                  {action.icon}\r\n                  {action.label}\r\n                </a>\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </nav>\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n};\r\n\r\nconst DesktopNavigation = () => (\r\n  <nav className=\"hidden md:block\">\r\n    <NavigationMenu>\r\n      <NavigationMenuList>\r\n        {content.navigation.main.map((navItem) => (\r\n          <NavigationMenuItem key={navItem.id}>\r\n            <NavigationMenuTrigger>{navItem.label}</NavigationMenuTrigger>\r\n            <NavigationMenuContent>\r\n              <ul className=\"grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2\">\r\n                {navItem.subItems.map((subItem) => (\r\n                  <ListItem key={subItem.id} title={subItem.title} href={subItem.href}>\r\n                    {subItem.description}\r\n                  </ListItem>\r\n                ))}\r\n              </ul>\r\n            </NavigationMenuContent>\r\n          </NavigationMenuItem>\r\n        ))}\r\n        {content.navigation.static.map((item) => (\r\n          <NavigationMenuItem key={item.id}>\r\n            <NavigationMenuLink asChild>\r\n              <a href={item.path} className={navigationMenuTriggerStyle()}>\r\n                {item.label}\r\n              </a>\r\n            </NavigationMenuLink>\r\n          </NavigationMenuItem>\r\n        ))}\r\n      </NavigationMenuList>\r\n    </NavigationMenu>\r\n  </nav>\r\n);\r\n\r\ntype NavbarProps = React.ComponentPropsWithoutRef<\"header\"> & Partial<Content>;\r\n\r\nexport const NavbarMegaMenu = (props: NavbarProps) => {\r\n  const { actions } = {\r\n    ...content,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"sticky top-0 z-20 w-full border-b bg-background/95\">\r\n        <div className=\"container mx-auto px-4 flex h-14 items-center\">\r\n          <div className=\"mr-4 flex\">\r\n            <Brand />\r\n          </div>\r\n          <DesktopNavigation />\r\n          <div className=\"flex flex-1 items-center justify-end space-x-2\">\r\n            <MobileNavigation />\r\n            {actions.map((action) => (\r\n              <Button\r\n                key={action.id}\r\n                variant=\"outline\"\r\n                className=\"hidden md:flex\"\r\n                asChild\r\n              >\r\n                <a href={action.path}>\r\n                  {action.icon}\r\n                  {action.label}\r\n                </a>\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <HeroSection />\r\n    </>\r\n  );\r\n};\r\n\r\nconst HeroSection = () => (\r\n  <section className=\"w-full py-16 lg:py-32\">\r\n    <div className=\"container mx-auto px-4 md:px-6 lg:px-8\">\r\n      <div className=\"flex flex-col text-center gap-8 items-center\">\r\n        <div className=\"flex flex-col gap-4\">\r\n          <h2 className=\"max-w-2xl text-3xl md:text-4xl lg:text-6xl font-bold\">\r\n            How do use the navbar?\r\n          </h2>\r\n          <p className=\"text-lg text-muted-foreground max-w-2xl\">\r\n            Content Hero\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n);\r\n\r\n// Strict adherence to the current component name\r\nconst componentName = \"NavbarMegaMenu\" as const;\r\n\r\n// Register the ViewScript for this component\r\nregisterViewScript(componentName, () => `\r\n<script>\r\n    let isMenuOpen = false;\r\n    let activeSubmenu = null;\r\n    const burgerBtn = document.querySelector('[aria-controls=\"radix-:Rt:\"]');\r\n    const desktopButtons = document.querySelectorAll('[data-radix-collection-item]');\r\n    const mobileSheet = document.createElement('div');\r\n    mobileSheet.className = 'fixed inset-y-0 right-0 w-[80%] max-w-sm bg-background shadow-xl transform translate-x-full transition-transform duration-300 z-20';\r\n    mobileSheet.innerHTML = \\` <div class=\"p-4 space-y-4\"><div class=\"flex justify-between items-center\"><h2 class=\"text-lg font-semibold\">Menu</h2><button class=\"close-sheet p-2\">✕</button></div><div class=\"space-y-2\"> \\${Array.from(desktopButtons).map(btn => \\` <div class=\"mobile-menu-item\"><button class=\"w-full text-left p-3 hover:bg-accent rounded-md flex justify-between items-center\"> \\${btn.textContent} </button><div class=\"submenu hidden pl-4 space-y-2 mt-2\"><a href=\"#\" class=\"block p-2 hover:bg-accent rounded-md\">Submenu Item 1</a><a href=\"#\" class=\"block p-2 hover:bg-accent rounded-md\">Submenu Item 2</a></div></div> \\`).join('')} </div></div> \\`;\r\n\r\n    function handleDesktopMenu() {\r\n      desktopButtons.forEach(btn => {\r\n      if (!btn.hasAttribute('aria-expanded')) return;\r\n      const submenu = document.createElement('div');\r\n      submenu.className = 'absolute top-full left-0 mt-2 w-48 bg-background shadow-lg rounded-md hidden';\r\n      submenu.innerHTML = \\` <div class=\"p-2 space-y-1\"><a href=\"#\" class=\"block px-3 py-2 rounded-md hover:bg-accent\">Submenu Item 1</a><a href=\"#\" class=\"block px-3 py-2 rounded-md hover:bg-accent\">Submenu Item 2</a></div> \\`;\r\n      btn.parentElement.appendChild(submenu);\r\n      btn.addEventListener('click', () => {\r\n        const isOpen = btn.getAttribute('data-state') === 'open';\r\n        if (isOpen) {\r\n        btn.setAttribute('data-state', 'closed');\r\n        submenu.classList.add('hidden');\r\n        } else {\r\n        btn.setAttribute('data-state', 'open');\r\n        submenu.classList.remove('hidden');\r\n        }\r\n      });\r\n      });\r\n    }\r\n    function handleMobileMenu() {\r\n      document.body.appendChild(mobileSheet);\r\n      burgerBtn.addEventListener('click', () => {\r\n      isMenuOpen = !isMenuOpen;\r\n      mobileSheet.style.transform = isMenuOpen ? 'translateX(0)' : 'translateX(100%)';\r\n      });\r\n      mobileSheet.querySelector('.close-sheet').addEventListener('click', () => {\r\n      isMenuOpen = false;\r\n      mobileSheet.style.transform = 'translateX(100%)';\r\n      });\r\n      mobileSheet.querySelectorAll('.mobile-menu-item button').forEach(btn => {\r\n      btn.addEventListener('click', (e) => {\r\n        const submenu = e.currentTarget.nextElementSibling;\r\n        submenu.classList.toggle('hidden');\r\n      });\r\n      });\r\n    }\r\n    handleDesktopMenu();\r\n    handleMobileMenu();\r\n    document.addEventListener('click', (e) => {\r\n      if (!e.target.closest('[data-radix-collection-item]')) {\r\n      desktopButtons.forEach(btn => {\r\n        btn.setAttribute('data-state', 'closed');\r\n        const submenu = btn.parentElement.querySelector('.absolute');\r\n        if (submenu) submenu.classList.add('hidden');\r\n      });\r\n      }\r\n    });\r\n</script>\r\n`);"
    },
    {
      "name": "NavbarLineMenu",
      "path": "src\\blocks\\navbar\\NavbarLineMenu.tsx",
      "dependencies": {
        "imports": [],
        "packages": [
          "lucide-react",
          "@/components/ui/button",
          "@/components/ui/sheet",
          "@/utils/viewScript"
        ]
      },
      "content": {
        "brand": {
          "name": "Buildy/UI",
          "icon": {
            "type": "Component",
            "name": "Layers",
            "props": {
              "className": "h-5 w-5"
            }
          }
        },
        "navigation": [
          {
            "id": "docs",
            "path": "https://ui.hinddy.com/docs",
            "label": "Documentation",
            "icon": {
              "type": "Component",
              "name": "BookOpen",
              "props": {
                "className": "h-5 w-5"
              }
            }
          },
          {
            "id": "components",
            "path": "https://ui.hinddy.com/components",
            "label": "Components",
            "icon": {
              "type": "Component",
              "name": "Layers",
              "props": {
                "className": "h-5 w-5"
              }
            }
          }
        ],
        "actions": [
          {
            "id": "github",
            "path": "https://github.com/alexy-os/react-shadcn-uiblocks",
            "label": "GitHub",
            "icon": {
              "type": "Component",
              "name": "Github",
              "props": {
                "className": "h-5 w-5"
              }
            }
          }
        ]
      },
      "sourceCode": "import { Menu, BookOpen, Layers, Github } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetTrigger,\r\n  SheetTitle,\r\n  SheetDescription,\r\n} from \"@/components/ui/sheet\";\r\n\r\ntype Content = {\r\n  brand: {\r\n    name: string;\r\n    icon: React.ReactNode;\r\n  };\r\n  navigation: {\r\n    id: string;\r\n    path: string;\r\n    label: string;\r\n    icon: React.ReactNode;\r\n  }[];\r\n  actions: {\r\n    id: string;\r\n    path: string;\r\n    label: string;\r\n    icon: React.ReactNode;\r\n  }[];\r\n};\r\nimport { registerViewScript } from '@/utils/viewScript';\r\n\r\nconst content: Content = {\r\n  brand: {\r\n    name: \"Buildy/UI\",\r\n    icon: <Layers className=\"h-5 w-5\" />,\r\n  },\r\n  navigation: [\r\n    {\r\n      id: \"docs\",\r\n      path: \"https://ui.hinddy.com/docs\",\r\n      label: \"Documentation\",\r\n      icon: <BookOpen className=\"h-5 w-5\" />,\r\n    },\r\n    {\r\n      id: \"components\",\r\n      path: \"https://ui.hinddy.com/components\",\r\n      label: \"Components\",\r\n      icon: <Layers className=\"h-5 w-5\" />,\r\n    },\r\n  ],\r\n  actions: [\r\n    {\r\n      id: \"github\",\r\n      path: \"https://github.com/alexy-os/react-shadcn-uiblocks\",\r\n      label: \"GitHub\",\r\n      icon: <Github className=\"h-5 w-5\" />,\r\n    },\r\n  ],\r\n} as const;\r\n\r\nconst Brand = () => {\r\n  const { name } = content.brand;\r\n  return (\r\n    <div className=\"flex items-center gap-2\">\r\n      <Layers className=\"h-5 w-5\" />\r\n      <span className=\"font-semibold\">{name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MobileNavigation = () => {\r\n  return (\r\n    <Sheet>\r\n      <SheetTrigger asChild>\r\n        <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\r\n          <Menu className=\"h-5 w-5\" />\r\n          <span className=\"sr-only\">Open menu</span>\r\n        </Button>\r\n      </SheetTrigger>\r\n      <SheetContent side=\"left\" className=\"w-[300px]\">\r\n        <div className=\"mb-6\">\r\n          <Brand />\r\n        </div>\r\n        <SheetTitle className=\"sr-only\">Navigation Menu</SheetTitle>\r\n        <SheetDescription className=\"sr-only\">\r\n          Main navigation for mobile devices\r\n        </SheetDescription>\r\n        <nav className=\"flex flex-col space-y-2\">\r\n          {content.navigation.map((item) => (\r\n            <Button\r\n              key={item.id}\r\n              variant=\"ghost\"\r\n              className=\"justify-start w-full\"\r\n              asChild\r\n            >\r\n              <a href={item.path}>\r\n                {item.icon}\r\n                {item.label}\r\n              </a>\r\n            </Button>\r\n          ))}\r\n        </nav>\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n};\r\n\r\nconst HeroSection = () => (\r\n  <section className=\"w-full py-16 lg:py-32\">\r\n    <div className=\"container mx-auto px-4 md:px-6 lg:px-8\">\r\n      <div className=\"flex flex-col text-center gap-8 items-center\">\r\n        <div className=\"flex flex-col gap-4\">\r\n          <h2 className=\"max-w-2xl text-3xl md:text-4xl lg:text-6xl font-bold\">\r\n            Effortless Prototyping\r\n          </h2>\r\n          <p className=\"text-lg text-muted-foreground max-w-2xl\">\r\n            Streamline your development process with our flexible UI library.\r\n            Experience effortless prototyping and create custom, responsive\r\n            designs quickly and efficiently.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n);\r\n\r\ntype NavbarProps = React.ComponentPropsWithoutRef<\"header\"> & Partial<Content>;\r\n\r\nexport const NavbarLineMenu = (props: NavbarProps) => {\r\n  const { navigation, actions } = {\r\n    ...content,\r\n    ...props,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"sticky top-0 z-20 w-full border-b bg-background/95\">\r\n        <div className=\"container mx-auto px-4 flex h-14 items-center\">\r\n          <div className=\"mr-4 flex\">\r\n            <Brand />\r\n          </div>\r\n\r\n          <nav className=\"hidden md:flex items-center space-x-4\">\r\n            {navigation.map((item) => (\r\n              <Button key={item.id} variant=\"ghost\" asChild>\r\n                <a href={item.path}>\r\n                  {item.label}\r\n                </a>\r\n              </Button>\r\n            ))}\r\n          </nav>\r\n\r\n          <div className=\"flex flex-1 items-center justify-end space-x-2\">\r\n            <MobileNavigation />\r\n\r\n            {actions.map((action) => (\r\n              <Button\r\n                key={action.id}\r\n                variant=\"outline\"\r\n                className=\"hidden md:flex\"\r\n                asChild\r\n              >\r\n                <a href={action.path}>\r\n                  {action.icon}\r\n                  {action.label}\r\n                </a>\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <HeroSection />\r\n    </>\r\n  );\r\n};\r\n\r\n// Strict adherence to the current component name\r\nconst componentName = \"NavbarLineMenu\" as const;\r\n\r\n// Register the ViewScript for this component\r\nregisterViewScript(componentName, () => `\r\n<script>\r\n    let isMenuOpen = false;\r\n    const burgerBtn = document.querySelector('[aria-controls=\"radix-:Rt:\"]');\r\n    const mobileSheet = document.createElement('div');\r\n    mobileSheet.className = 'fixed inset-y-0 right-0 w-[80%] max-w-sm bg-background shadow-xl transform translate-x-full transition-transform duration-300 z-20';\r\n    mobileSheet.innerHTML = \\`\r\n        <div class=\"p-4 space-y-4\">\r\n            <div class=\"flex justify-between items-center\">\r\n                <h2 class=\"text-lg font-semibold\">Menu</h2>\r\n                <button class=\"close-sheet p-2\">✕</button>\r\n            </div>\r\n            <div class=\"space-y-2\">\r\n                <a href=\"https://ui.hinddy.com/docs\" class=\"block p-2 hover:bg-accent rounded-md\">Documentation</a>\r\n                <a href=\"https://ui.hinddy.com/components\" class=\"block p-2 hover:bg-accent rounded-md\">Components</a>\r\n            </div>\r\n        </div>\r\n    \\`;\r\n\r\n    function handleMobileMenu() {\r\n        document.body.appendChild(mobileSheet);\r\n        \r\n        burgerBtn.addEventListener('click', () => {\r\n            isMenuOpen = !isMenuOpen;\r\n            mobileSheet.style.transform = isMenuOpen ? 'translateX(0)' : 'translateX(100%)';\r\n        });\r\n\r\n        mobileSheet.querySelector('.close-sheet').addEventListener('click', () => {\r\n            isMenuOpen = false;\r\n            mobileSheet.style.transform = 'translateX(100%)';\r\n        });\r\n    }\r\n\r\n    handleMobileMenu();\r\n</script>\r\n`);"
    }
  ],
  "generated": "2024-12-31T14:22:55.485Z"
}